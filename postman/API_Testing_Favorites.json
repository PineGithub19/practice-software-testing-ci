{
  "info": {
    "_postman_id": "4bff6c24-f15b-42d9-82ff-d223f0b38e52",
    "name": "API Testing Favorites",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "33491043"
  },
  "item": [
    {
      "name": "/favorites",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is valid (201 or 422)\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 422]);\r",
              "});\r",
              "\r",
              "let jsonData = {};\r",
              "try {\r",
              "    jsonData = pm.response.json();\r",
              "} catch (e) {\r",
              "    jsonData = {};\r",
              "    console.warn(\"Response is not valid JSON:\", pm.response.text());\r",
              "}\r",
              "\r",
              "// Nếu thành công (201)\r",
              "if (pm.response.code === 201) {\r",
              "    pm.test(\"Response contains product_id\", function () {\r",
              "        pm.expect(jsonData).to.have.property(\"product_id\");\r",
              "    });\r",
              "\r",
              "    pm.test(\"Response contains user_id\", function () {\r",
              "        pm.expect(jsonData).to.have.property(\"user_id\");\r",
              "    });\r",
              "\r",
              "    pm.test(\"Response contains favorite id\", function () {\r",
              "        pm.expect(jsonData).to.have.property(\"id\");\r",
              "        pm.expect(jsonData.id).to.not.be.null;\r",
              "    });\r",
              "}\r",
              "\r",
              "// Nếu lỗi (422)\r",
              "else if (pm.response.code === 422) {\r",
              "    // product_id invalid\r",
              "    pm.test(\"Invalid product_id error handled\", function () {\r",
              "        if (jsonData.product_id) {\r",
              "            pm.expect(jsonData.product_id[0]).to.be.oneOf([\r",
              "                \"The selected product id is invalid.\",\r",
              "                \"The product id field is required.\"\r",
              "            ]);\r",
              "        }\r",
              "    });\r",
              "\r",
              "    // Duplicate entry\r",
              "    pm.test(\"Duplicate entry error handled\", function () {\r",
              "        if (jsonData.message) {\r",
              "            pm.expect(jsonData.message).to.eql(\"Duplicate Entry\");\r",
              "        }\r",
              "    });\r",
              "}\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": " {\r\n    \"product_id\": {{product_id}}\r\n} ",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseURL}}/favorites",
          "host": ["{{baseURL}}"],
          "path": ["favorites"]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseURL",
      "value": "https://api-with-bugs.practicesoftwaretesting.com",
      "type": "default"
    }
  ]
}
