{
  "info": {
    "_postman_id": "e40e7d91-ad99-4d2d-8f83-c28b23f316af",
    "name": "API Testing Payment",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "33491043"
  },
  "item": [
    {
      "name": "/payment/check",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Pre-request script to validate payment data format",
              "let method = pm.iterationData.get(\"method\");",
              "let accountName = pm.iterationData.get(\"account_name\");",
              "let accountNumber = pm.iterationData.get(\"account_number\");",
              "let expectedStatus = pm.iterationData.get(\"status\");",
              "",
              "// Validation rules based on d3.json analysis",
              "let validationErrors = [];",
              "",
              "// 1. Method validation",
              "const allowedMethods = [\"Credit Card\", \"Bank Transfer\", \"Cash on Delivery\", \"Buy Now Pay Later\", \"Gift Card\"];",
              "if (!method || method.trim() === \"\") {",
              "    validationErrors.push(\"Method is required and cannot be empty\");",
              "} else if (!allowedMethods.includes(method)) {",
              "    validationErrors.push(`Method '${method}' is not allowed. Allowed methods: ${allowedMethods.join(\", \")}`);",
              "}",
              "",
              "// 2. Account name validation",
              "if (!accountName || accountName.trim() === \"\") {",
              "    validationErrors.push(\"Account name is required and cannot be empty\");",
              "} else {",
              "    // Check for leading/trailing spaces",
              "    if (accountName !== accountName.trim()) {",
              "        validationErrors.push(\"Account name cannot have leading or trailing spaces\");",
              "    }",
              "    ",
              "    // Check for special characters at start",
              "    if (/^[^a-zA-Z]/.test(accountName.trim())) {",
              "        validationErrors.push(\"Account name cannot start with numbers or special characters\");",
              "    }",
              "    ",
              "    // Check length (based on test data, seems to be around 100-120 characters)",
              "    if (accountName.trim().length > 120) {",
              "        validationErrors.push(\"Account name is too long (max 120 characters)\");",
              "    }",
              "    ",
              "    // Check minimum length",
              "    if (accountName.trim().length < 2) {",
              "        validationErrors.push(\"Account name is too short (min 2 characters)\");",
              "    }",
              "}",
              "",
              "// 3. Account number validation",
              "if (!accountNumber || accountNumber.trim() === \"\") {",
              "    validationErrors.push(\"Account number is required and cannot be empty\");",
              "} else {",
              "    // Check for non-numeric characters",
              "    if (!/^\\d+$/.test(accountNumber)) {",
              "        validationErrors.push(\"Account number must contain only digits\");",
              "    }",
              "    ",
              "    // Check for spaces or special characters",
              "    if (/[\\s\\-\\_\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\=\\[\\]\\{\\}\\|\\\\\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?]/.test(accountNumber)) {",
              "        validationErrors.push(\"Account number cannot contain spaces or special characters\");",
              "    }",
              "}",
              "",
              "// Log validation results",
              "if (validationErrors.length > 0) {",
              "    console.log(\"❌ Validation errors found:\");",
              "    validationErrors.forEach(error => console.log(`  - ${error}`));",
              "    console.log(`Expected status: ${expectedStatus}, but validation suggests 400`);",
              "} else {",
              "    console.log(\"✅ All validation checks passed\");",
              "    console.log(`Expected status: ${expectedStatus}`);",
              "}",
              "",
              "// Set request body with validated data",
              "let body = {",
              "    method: method,",
              "    account_name: accountName,",
              "    account_number: accountNumber",
              "};",
              "",
              "pm.request.body.raw = JSON.stringify(body, null, 2);",
              "",
              "// Store validation info for test script",
              "pm.environment.set(\"validationErrors\", JSON.stringify(validationErrors));",
              "pm.environment.set(\"expectedStatus\", expectedStatus);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Lấy status code",
              "pm.test(\"Status code is valid\", function () {",
              "    pm.expect([200, 400]).to.include(pm.response.code);",
              "});",
              "",
              "// Parse JSON response (nếu hợp lệ)",
              "let jsonData;",
              "try {",
              "    jsonData = pm.response.json();",
              "} catch (e) {",
              "    jsonData = {};",
              "    console.warn(\"Response is not valid JSON:\", pm.response.text());",
              "}",
              "",
              "// Get validation info from pre-request script",
              "let validationErrors = JSON.parse(pm.environment.get(\"validationErrors\") || \"[]\");",
              "let expectedStatus = pm.environment.get(\"expectedStatus\");",
              "",
              "// Test based on validation and expected status",
              "if (validationErrors.length > 0) {",
              "    // Should return 400 if validation fails",
              "    pm.test(\"Returns 400 when validation fails\", function () {",
              "        pm.expect(pm.response.code).to.equal(400);",
              "    });",
              "    ",
              "    pm.test(\"Response contains error message\", function () {",
              "        pm.expect(jsonData).to.have.property(\"error\");",
              "    });",
              "} else {",
              "    // Should return 200 if validation passes",
              "    pm.test(\"Returns 200 when validation passes\", function () {",
              "        pm.expect(pm.response.code).to.equal(200);",
              "    });",
              "    ",
              "    pm.test(\"Response contains success message\", function () {",
              "        pm.expect(jsonData).to.have.property(\"message\");",
              "        pm.expect(jsonData.message).to.eql(\"Payment was successful\");",
              "    });",
              "}",
              "",
              "// Additional test for expected status from data file",
              "pm.test(\"Response matches expected status from data file\", function () {",
              "    pm.expect(pm.response.code).to.equal(parseInt(expectedStatus));",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwOTEvdXNlcnMvbG9naW4iLCJpYXQiOjE3NTU1OTgwNzksImV4cCI6MTc3MTE5ODA3OSwibmJmIjoxNzU1NTk4MDc5LCJqdGkiOiJqTDZ2U3d1TmxaTU9rcXlUIiwic3ViIjoiMiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJyb2xlIjoidXNlciJ9.CTcnBUuV1ox24n5Fl4IIuoQ8d2Z6ux4_rHdHv58I3K8",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"method\": \"{{method}}\",\r\n  \"account_name\": \"{{account_name}}\",\r\n  \"account_number\": \"{{account_number}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseURL}}/payment/check",
          "host": ["{{baseURL}}"],
          "path": ["payment", "check"]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseURL",
      "value": "https://api-with-bugs.practicesoftwaretesting.com",
      "type": "default"
    }
  ]
}
